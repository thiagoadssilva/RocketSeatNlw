{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/var/www/rocketSeatNlw/frontend/src/pages/episodes/[slug].tsx\";\nimport { parseISO, format } from \"date-fns\";\nimport { ptBR } from \"date-fns/locale\";\nimport { api } from \"../../services/api\";\nimport { convertDuranteTotimeString } from \"../../utils/convertDuranteTotimeString\";\nimport styles from './episode.module.scss';\nexport default function Episode({\n  episode\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.episode,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.thumbnailContainer,\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"/arrow-left.svg\",\n          alt: \"Voltar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n}\nexport const getStaticPaths = async () => {\n  return {\n    paths: [],\n    fallback: 'blocking'\n  };\n};\nexport const getStaticProps = async context => {\n  const {\n    slug\n  } = context.params;\n  const {\n    data\n  } = await api.get(`/episodes/${slug}`);\n  const episode = {\n    id: data.id,\n    title: data.title,\n    thumbnail: data.thumbnail,\n    members: data.members,\n    publishedAt: format(parseISO(data.published_at), \"d MMM yy\", {\n      locale: ptBR\n    }),\n    duration: Number(data.file.duration),\n    durationAsString: convertDuranteTotimeString(Number(data.file.duration)),\n    description: data.description,\n    url: data.file.url\n  };\n  return {\n    props: {\n      episode\n    },\n    revalidate: 60 * 60 * 24 // Recarregar a pagina depois de 24 horas\n\n  };\n};","map":{"version":3,"sources":["/var/www/rocketSeatNlw/frontend/src/pages/episodes/[slug].tsx"],"names":["parseISO","format","ptBR","api","convertDuranteTotimeString","styles","Episode","episode","thumbnailContainer","getStaticPaths","paths","fallback","getStaticProps","context","slug","params","data","get","id","title","thumbnail","members","publishedAt","published_at","locale","duration","Number","file","durationAsString","description","url","props","revalidate"],"mappings":";;AAAA,SAASA,QAAT,EAAkBC,MAAlB,QAAgC,UAAhC;AACA,SAASC,IAAT,QAAqB,iBAArB;AAGA,SAASC,GAAT,QAAoB,oBAApB;AACA,SAASC,0BAAT,QAA2C,wCAA3C;AACA,OAAOC,MAAP,MAAmB,uBAAnB;AAmBA,eAAe,SAASC,OAAT,CAAkB;AAACC,EAAAA;AAAD,CAAlB,EAA2C;AAExD,sBACE;AAAK,IAAA,SAAS,EAAEF,MAAM,CAACE,OAAvB;AAAA,2BACE;AAAK,MAAA,SAAS,EAAEF,MAAM,CAACG,kBAAvB;AAAA,6BACE;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAA,+BACE;AAAK,UAAA,GAAG,EAAC,iBAAT;AAA2B,UAAA,GAAG,EAAC;AAA/B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAYD;AAED,OAAO,MAAMC,cAA8B,GAAG,YAAW;AACvD,SAAM;AACJC,IAAAA,KAAK,EAAC,EADF;AAEJC,IAAAA,QAAQ,EAAE;AAFN,GAAN;AAID,CALM;AAOP,OAAO,MAAMC,cAA8B,GAAG,MAAOC,OAAP,IAAmB;AAC/D,QAAM;AAAEC,IAAAA;AAAF,MAAWD,OAAO,CAACE,MAAzB;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAW,MAAMb,GAAG,CAACc,GAAJ,CAAS,aAAYH,IAAK,EAA1B,CAAvB;AAEA,QAAMP,OAAO,GAAG;AACdW,IAAAA,EAAE,EAAEF,IAAI,CAACE,EADK;AAEdC,IAAAA,KAAK,EAAEH,IAAI,CAACG,KAFE;AAGdC,IAAAA,SAAS,EAAEJ,IAAI,CAACI,SAHF;AAIdC,IAAAA,OAAO,EAAEL,IAAI,CAACK,OAJA;AAKdC,IAAAA,WAAW,EAAErB,MAAM,CAACD,QAAQ,CAACgB,IAAI,CAACO,YAAN,CAAT,EAA8B,UAA9B,EAA0C;AAAEC,MAAAA,MAAM,EAAEtB;AAAV,KAA1C,CALL;AAMduB,IAAAA,QAAQ,EAAEC,MAAM,CAACV,IAAI,CAACW,IAAL,CAAUF,QAAX,CANF;AAOdG,IAAAA,gBAAgB,EAAExB,0BAA0B,CAACsB,MAAM,CAACV,IAAI,CAACW,IAAL,CAAUF,QAAX,CAAP,CAP9B;AAQdI,IAAAA,WAAW,EAAEb,IAAI,CAACa,WARJ;AASdC,IAAAA,GAAG,EAAEd,IAAI,CAACW,IAAL,CAAUG;AATD,GAAhB;AAYA,SAAO;AACLC,IAAAA,KAAK,EAAE;AACLxB,MAAAA;AADK,KADF;AAILyB,IAAAA,UAAU,EAAE,KAAK,EAAL,GAAU,EAJjB,CAIqB;;AAJrB,GAAP;AAMD,CAtBM","sourcesContent":["import { parseISO,format } from \"date-fns\";\nimport { ptBR } from \"date-fns/locale\";\nimport { GetStaticPaths, GetStaticProps } from \"next\";\nimport { useRouter } from \"next/router\";\nimport { api } from \"../../services/api\";\nimport { convertDuranteTotimeString } from \"../../utils/convertDuranteTotimeString\";\nimport styles from './episode.module.scss';\nimport Image from 'next/image';\n\ntype Episode = {\n  id: string;\n  title: string;\n  thumbnail: string;\n  description: string;\n  members: string;\n  duration: number;\n  durationAsString: string;\n  url: string;\n  publishedAt: string;\n};\n\ntype EpisodeProps = {\n  episode: Episode;\n};\n\nexport default function Episode( {episode}: EpisodeProps) {\n\n  return(\n    <div className={styles.episode}>\n      <div className={styles.thumbnailContainer}>\n        <button type=\"button\">\n          <img src=\"/arrow-left.svg\" alt=\"Voltar\"/>\n        </button>\n\n        \n      </div>\n    </div>\n\n  );\n}\n\nexport const getStaticPaths: GetStaticPaths = async () =>{\n  return{\n    paths:[],\n    fallback: 'blocking'\n  }\n} \n\nexport const getStaticProps: GetStaticProps = async (context) => {\n  const { slug } = context.params;\n  const { data } = await api.get(`/episodes/${slug}`);\n\n  const episode = {\n    id: data.id,\n    title: data.title,\n    thumbnail: data.thumbnail,\n    members: data.members,\n    publishedAt: format(parseISO(data.published_at), \"d MMM yy\", { locale: ptBR,}),\n    duration: Number(data.file.duration),\n    durationAsString: convertDuranteTotimeString(Number(data.file.duration)),\n    description: data.description,\n    url: data.file.url,\n  };\n\n  return {\n    props: {\n      episode,\n    },\n    revalidate: 60 * 60 * 24, // Recarregar a pagina depois de 24 horas\n  };\n};\n"]},"metadata":{},"sourceType":"module"}