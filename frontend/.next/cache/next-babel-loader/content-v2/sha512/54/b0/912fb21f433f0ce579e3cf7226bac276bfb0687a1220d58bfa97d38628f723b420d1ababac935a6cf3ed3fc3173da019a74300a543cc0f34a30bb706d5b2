{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/var/www/rocketSeatNlw/frontend/src/pages/episodes/[slug].tsx\";\nexport var __N_SSG = true;\nexport default function Episode(_ref) {\n  var episode = _ref.episode;\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: episode.title\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 10\n  }, this);\n}\n_c = Episode;\n\nvar _c;\n\n$RefreshReg$(_c, \"Episode\");","map":{"version":3,"sources":["/var/www/rocketSeatNlw/frontend/src/pages/episodes/[slug].tsx"],"names":["Episode","episode","title"],"mappings":";;;AAuBA,eAAe,SAASA,OAAT,OAA2C;AAAA,MAAxBC,OAAwB,QAAxBA,OAAwB;AAExD,sBAAO;AAAA,cAAKA,OAAO,CAACC;AAAb;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;KAHuBF,O","sourcesContent":["import { parseISO,format } from \"date-fns\";\nimport { ptBR } from \"date-fns/locale\";\nimport { GetStaticPaths, GetStaticProps } from \"next\";\nimport { useRouter } from \"next/router\";\nimport { api } from \"../../services/api\";\nimport { convertDuranteTotimeString } from \"../../utils/convertDuranteTotimeString\";\n\ntype Episode = {\n  id: string;\n  title: string;\n  thumbnail: string;\n  description: string;\n  members: string;\n  duration: number;\n  durationAsString: string;\n  url: string;\n  publishedAt: string;\n};\n\ntype EpisodeProps = {\n  episode: Episode;\n};\n\nexport default function Episode( {episode}: EpisodeProps) {\n\n  return <h1>{episode.title}</h1>;\n}\n\nexport const getStaticPaths: GetStaticPaths = async () =>{\n  return{\n    paths:[],\n    fallback: 'blocking'\n  }\n} \n\nexport const getStaticProps: GetStaticProps = async (context) => {\n  const { slug } = context.params;\n  const { data } = await api.get(`/episodes/${slug}`);\n\n  const episode = {\n    id: data.id,\n    title: data.title,\n    thumbnail: data.thumbnail,\n    members: data.members,\n    publishedAt: format(parseISO(data.published_at), \"d MMM yy\", { locale: ptBR,}),\n    duration: Number(data.file.duration),\n    durationAsString: convertDuranteTotimeString(Number(data.file.duration)),\n    description: data.description,\n    url: data.file.url,\n  };\n\n  return {\n    props: {\n      episode,\n    },\n    revalidate: 60 * 60 * 24, // Recarregar a pagina depois de 24 horas\n  };\n};\n"]},"metadata":{},"sourceType":"module"}